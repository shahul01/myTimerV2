Total:
  # bugs:
    timer:
      ✔ timer still gives switching error @done(23-08-27 00:56)
        - as it is a new timer(?) rather than referencing the component it creates and reuses it
        - fix:
          - on pause: send 'currentTimer' to parent
          - on resume: resume from last paused 'currentTimer'
        - solved by invalidating context on success
    ✔ sync @done(23-08-27 00:58)
      ✔ sync by title has repeated titles... @done(23-08-27 00:56)

    electron:
      ☐ refresh fn not working when frameless

    ☐ Warning:
      ✔ 1. Can't perform a React state update on an unmounted component. @done(23-08-02 14:47)
        - This is a no-op, but it indicates a memory leak in your application.
        - To fix, cancel all subscriptions and asynchronous tasks in a useEffect cleanup function. at Timer



  # important:
    - top:

      - top 5:
        - (fix bugs)
        ✔ reset timer @done(23-08-19 00:41)
        ✔ for mac: always visible @done(23-08-19 00:57)
        ✔ id instead of name (use 'name ===' to filter) @done(23-08-27 00:56)
        - backup and restore w/ config file
        - testing

      - rest:
        - double click - pause / resume
        - change bg color on running
        - local storage
        - user auth
        - refactor

        - Input mask
        - timer string validation
        - Backup and restore
        - web version
        - phone version

        - keep an eye on inline TODOs



  # design:
    ✔ no window titlebar @done(23-07-31 14:13)
    ☐ when running, change body color
    ☐ to timer lists:
      ☐ update height dynamically depending on tasks list length, then after say, 5 timers,
      ☐ add scrollbars
    ☐ replace border with fading border

    ☐ size
      ☐ resizable
        ☐ remembers dimensions even after toggling different sizes
      ☐ font auto adjust
      ☐ on modal, have prop for modal that resizes the electron app acc to modal props

    ☐ responsive
    ☐ theme color per task



  # techstack:
    ☐ db
      - postgresql
    ☐ tailwind
      - for responsiveness(?)



  # ideas:
    versions:
      ☐ electron:
        ☐ Mac: show on all windows / desktops
        ☐ refresh react home page
        ☐ integrate with db
        ☐ executable file:
          ☐ win
          ☐ mac
          ☐ integrated with db
          ☐ make it portable
        ☐ view raw data on db
          ☐ table name in dropdown, once selected
          ☐ shows all the data

        ☐ remember position on screen and monitor


      ☐ web:
        ☐ modes:
          - offline only ready
          ☐ online
            - add user roles
          ☐ needs server on web to run FE
          ☐ one source of truth timer
            - eg pausing web version pauses electron's timer for that user...
        ☐ PWA - for both modes


      ☐ phone:


    ☐ timer:
      ☐ reset
        ✔ and before reset, send timespent to db @done(23-08-27 01:05)
        ☐ after reset, sel timer shouldnt change
      ☐ add delete option to task
      ☐ on double click:
        - pause / resume
        - show elapsed timer
      ✔ id as identifier instead of title: @done(23-08-27 23:47)
        ✔ replace title with id, which could be same as title, so title can be edited @done(23-08-27 01:05)
      ☐ editable
        ☐ title
        ☐ timerInput:
          - ie each task has default timer, make it changable
          ☐ before updating the timer, prompt to save data to db
            - create timespent prop for ITask, which persists for entire day


    ☐ Backup and restore:
      feature:
        ✔ when clicking particular btn @done(23-08-27 23:38)
        ☐ basic
        ☐ backup
        ☐ restore
        ☐ as .jsonc config file
      code:
        ☐ add reducers for hard coded values in Sync/ExportData.tsx(+)

    ☐ Input mask
    ☐ timer string validation:
      ☐ regex
      ☐ zod


    ☐ sync:
      ☐ can get tasks and current level of completion
      ☐ one touch sync
      ☐ btn to backup timer table within db

    ☐ minimise btn
    ☐ remove unicode and emoji btn and replace with svg buttons

    ☐ blink
      ☐ on end
      ☐ when paused, once every 15 mins

    ☐ open source the repo(?)

    ☐ local Storage
      - save every elapsed sec or min to lclStrg.
      - 'when' crash && if lclStrg has data && more time elapsed on lclStrg than db
        - ask to restore from lclStrg and push to db

    ☐ stopwatch:
      ☐ multiples in list just like timers but with stopwatch

    ☐ draggable anywhere
    ☐ timer list drag and droppable
    ☐ hotkeys
      ☐ resume and pause

    ☐ time end alert:
      ✔ beep @done(23-08-01 20:20)
      ✔ message dialog box @done(23-08-01 20:20)
      ☐ reverse countdown
    ☐ heatmap



  # refactor:
    ☐ sync.tsx → too many loops...
      - rewrite 3x
      - use chatgpt

    - type:
      ☐ replace `any`
        ☐ with proper type
        ☐ with unknown(?)
      ☐ replace `return` for guard clauses with `Error` if necessary
      ☐ logByDate has 2 interface, one global and one infile, remove one.



  # offline:
    ☐ save fonts locally
    ☐ offline only ready



  # testing:
    type:
      ☐ unit testing
        ☐ timer:
          ☐ runs for particular seconds etc
            ☐ unit testing
          ☐ play pause
        ☐ util function
          ☐ important ones
          ☐ possibly buggy ones
      ☐ e2e testing
        ☐ CRUD
        ☐ sync



  # performance:
    ☐ uninstall unused npms
    ☐ Reduce loop count(+) in Sync



  # security:
    ☐ User auth to connect with db

    ☐ Warning type log on Dev Tools: Electron Security Warning (Insecure Content-Security-Policy) This renderer process has either no Content Security
        Policy set or a policy with "unsafe-eval" enabled. This exposes users of
        this app to unnecessary security risks.

      For more information and help, consult
      https://electronjs.org/docs/tutorial/security.
      This warning will not show up
      once the app is packaged.

    ☐ turn on recently disabled rules(+)
      - in .eslintrc.js
    ☐ remove eslint in-file/in-line disable
      ☐ remove disabled rule for exhaustive useEffect deps



  # misc:
    ☐ https://github.com/shahul01/myTimerV2/issues
    ☐ add env processing files to trpc



  # docs & reference:
    - ~best practices:
      - file:///D:/Shahul/test-codes/fullstack/t3/chirp

    - timers:
      - https://codesandbox.io/s/4-sh-coundown-timers-add-yy9r48
      - https://codesandbox.io/s/sh-coundown-timers-single-button-y72wfh?file=/src/components/Timer/Timer.tsx

    - trpc / prisma:
      - https://trpc.io/docs/quickstart
      - https://trpc.io/docs/server/adapters/express
      - file:///D:/Shahul/test-codes/t3/tRPC/trpc/examples/minimal-react
      - file:///D:/Code/t3/my-t3-5-aug-23
      - Updating schema: https://www.prisma.io/docs/guides/migrate/developing-with-prisma-migrate/customizing-migrations#how-to-edit-a-migration-file

    - w/ sqlite:
      - https://stackoverflow.com/questions/41855859/electron-how-to-setup-db-with-sqlite-in-windows
      - https://morioh.com/a/9fa8d2cf658c/create-a-simple-react-project-electron-app-sqlite3-connection
      - https://fmacedoo.medium.com/standalone-application-with-electron-react-and-sqlite-stack-9536a8b5a7b9

    - node / express:
      - file:///D:/Shahul/test-codes/node/others/nodejs-the-complete-guide/26.%20Understanding%20Async%20Wait%20in%20NodeJS/Backend/

    - tools:
      - https://github.com/prosepilot/trpc-openapi
      - ERD:
        - https://github.com/mohammed-bahumaish/prisma-editor
        - https://cloud.smartdraw.com/

    - pin to top:
      - https://stackoverflow.com/questions/49232037/how-to-make-electron-in-a-window-on-top-of-all-other-windows-as-an-indicator-of
      - https://syobochim.medium.com/electron-keep-apps-on-top-whether-in-full-screen-mode-or-on-other-desktops-d7d914579fce

    - misc:
      - https://www.google.com/search?q=portable+electron+app
      - https://github.com/electron/electron/issues/11895



  # symbols:
    - (+) - already mentioned in code inline
    - (?) -



# Gist link:

